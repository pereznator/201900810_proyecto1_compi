// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: ReporteriaLexerCup.jflex

//Primera Parte
/*----------------------------------Codigo de Usuario-----------------------------------*/
package javaant;

import java.util.LinkedList;
import java_cup.runtime.Symbol;
import models.ErrorLex;

//Segunda Parte


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerReporteriaCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\1\6\1\7\2\0\1\10\1\11\1\12\1\13"+
    "\1\0\1\14\1\0\1\15\1\0\12\16\1\17\1\20"+
    "\1\0\1\21\3\0\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\34\1\42\1\43\1\44\1\45"+
    "\1\46\1\34\1\47\1\50\1\34\1\51\1\0\1\52"+
    "\1\0\1\53\1\0\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\34\1\42\1\43\1\44\1\45"+
    "\1\46\1\34\1\47\1\50\1\34\1\54\1\0\1\55"+
    "\7\0\1\3\252\0\2\56\115\0\1\57\u01a8\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\12\13\1\14\1\15"+
    "\1\16\1\17\1\1\1\0\1\20\3\0\1\20\1\0"+
    "\12\13\1\0\1\13\1\0\1\21\1\0\1\22\12\13"+
    "\1\0\1\13\1\0\1\23\3\13\1\0\1\13\1\24"+
    "\4\13\1\0\1\13\1\0\2\13\1\0\2\13\1\0"+
    "\3\13\1\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\2\13\1\0\1\25\2\13\1\0\1\13\2\26\2\27"+
    "\1\13\2\30\1\31\1\13\1\0\2\13\1\0\1\13"+
    "\1\32\1\33\1\32\1\33\2\34\1\13\1\0\4\13"+
    "\3\0\1\13\1\0\1\13\1\0\3\13\1\0\1\13"+
    "\2\0\1\13\1\0\1\13\1\0\3\13\1\0\2\35"+
    "\1\0\1\13\1\0\1\13\1\0\3\13\2\0\1\13"+
    "\1\0\1\13\1\0\3\13\2\0\1\13\1\0\1\13"+
    "\1\0\1\13\2\36\2\37\1\13\1\0\1\13\1\0"+
    "\1\13\1\40\1\0\2\41\1\13\1\0\1\13\2\0"+
    "\1\13\2\0\1\13\1\0\1\42\1\13\1\0\1\13"+
    "\1\0\1\13\1\0\1\13\1\0\1\13\1\0\1\13"+
    "\1\0\2\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\60\0\360\0\60"+
    "\0\60\0\140\0\u0120\0\60\0\60\0\60\0\u0150\0\u0180"+
    "\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0\0\u0300"+
    "\0\60\0\60\0\60\0\60\0\u0330\0\220\0\220\0\u0360"+
    "\0\u0390\0\360\0\360\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480"+
    "\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600"+
    "\0\u0630\0\60\0\u0660\0\u03c0\0\u0690\0\u06c0\0\u06f0\0\u0720"+
    "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0"+
    "\0\u08d0\0\u0390\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u0180"+
    "\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40"+
    "\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0"+
    "\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40"+
    "\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0180\0\u0f30\0\u0f60\0\u0f90"+
    "\0\u0fc0\0\u0180\0\60\0\u0ff0\0\u1020\0\u1050\0\u0180\0\60"+
    "\0\u0180\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u0180"+
    "\0\u0180\0\60\0\60\0\u0180\0\60\0\u11a0\0\u11d0\0\u1200"+
    "\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380"+
    "\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500"+
    "\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680"+
    "\0\u16b0\0\u0180\0\60\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0"+
    "\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920"+
    "\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\u1aa0"+
    "\0\u1ad0\0\u1b00\0\u1b30\0\u0180\0\60\0\u0180\0\60\0\u1b60"+
    "\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u0180\0\u1c50\0\u0180\0\60"+
    "\0\u1c80\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0"+
    "\0\u1e00\0\u1e30\0\60\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20"+
    "\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\u2070\0\u0180"+
    "\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\2\1\12\1\2\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\20\1\24"+
    "\10\20\1\25\1\20\1\26\1\27\1\20\1\30\2\20"+
    "\1\31\1\32\1\2\1\33\1\34\1\2\1\35\61\0"+
    "\2\3\1\0\1\3\7\0\1\3\43\0\2\36\3\0"+
    "\1\37\52\36\6\0\1\40\4\0\1\41\44\0\2\42"+
    "\3\0\3\42\1\43\47\42\15\0\1\44\1\13\57\0"+
    "\1\20\3\0\20\20\1\45\6\20\25\0\1\20\3\0"+
    "\27\20\25\0\1\20\3\0\16\20\1\46\10\20\25\0"+
    "\1\20\3\0\4\20\1\47\11\20\1\50\10\20\25\0"+
    "\1\20\3\0\11\20\1\51\15\20\25\0\1\20\3\0"+
    "\4\20\1\52\13\20\1\53\6\20\25\0\1\20\3\0"+
    "\23\20\1\54\3\20\25\0\1\20\3\0\22\20\1\55"+
    "\4\20\25\0\1\20\3\0\10\20\1\56\16\20\5\0"+
    "\1\57\17\0\1\20\3\0\1\60\26\20\53\0\1\61"+
    "\13\0\2\40\1\62\2\0\53\40\3\41\1\0\7\41"+
    "\1\63\44\41\16\0\1\64\57\0\1\20\3\0\2\20"+
    "\1\65\24\20\25\0\1\20\3\0\14\20\1\66\12\20"+
    "\25\0\1\20\3\0\5\20\1\67\21\20\25\0\1\20"+
    "\3\0\23\20\1\70\3\20\25\0\1\20\3\0\4\20"+
    "\1\71\22\20\25\0\1\20\3\0\15\20\1\72\11\20"+
    "\25\0\1\20\3\0\1\73\26\20\25\0\1\20\3\0"+
    "\15\20\1\74\11\20\25\0\1\20\3\0\20\20\1\75"+
    "\6\20\25\0\1\20\3\0\22\20\1\76\4\20\53\0"+
    "\1\77\31\0\1\20\3\0\13\20\1\100\13\20\51\0"+
    "\1\101\15\0\3\41\1\0\2\41\1\102\4\41\1\63"+
    "\44\41\16\0\1\20\3\0\7\20\1\103\17\20\25\0"+
    "\1\20\3\0\17\20\1\104\7\20\25\0\1\20\3\0"+
    "\10\20\1\105\16\20\5\0\1\106\17\0\1\20\3\0"+
    "\1\20\1\107\25\20\25\0\1\20\3\0\25\20\1\110"+
    "\1\20\25\0\1\20\3\0\4\20\1\111\22\20\25\0"+
    "\1\20\3\0\5\20\1\112\21\20\25\0\1\20\3\0"+
    "\22\20\1\113\4\20\25\0\1\20\3\0\10\20\1\114"+
    "\16\20\5\0\1\115\17\0\1\20\3\0\23\20\1\116"+
    "\3\20\54\0\1\117\30\0\1\20\3\0\16\20\1\120"+
    "\10\20\41\0\1\115\23\0\1\115\17\0\1\20\3\0"+
    "\10\20\1\121\16\20\5\0\1\122\17\0\1\20\3\0"+
    "\1\123\26\20\25\0\1\20\3\0\15\20\1\124\11\20"+
    "\46\0\1\125\36\0\1\20\3\0\13\20\1\126\13\20"+
    "\25\0\1\20\3\0\20\20\1\127\6\20\25\0\1\20"+
    "\3\0\10\20\1\130\16\20\5\0\1\131\17\0\1\20"+
    "\3\0\1\132\26\20\25\0\1\20\3\0\15\20\1\133"+
    "\11\20\46\0\1\134\36\0\1\20\3\0\13\20\1\135"+
    "\13\20\44\0\1\136\40\0\1\20\3\0\20\20\1\137"+
    "\6\20\25\0\1\20\3\0\24\20\1\140\2\20\55\0"+
    "\1\141\27\0\1\20\3\0\20\20\1\142\6\20\25\0"+
    "\1\20\3\0\10\20\1\143\16\20\5\0\1\144\33\0"+
    "\1\144\23\0\1\144\17\0\1\20\3\0\4\20\1\145"+
    "\22\20\25\0\1\20\3\0\1\146\26\20\25\0\1\20"+
    "\3\0\2\20\1\147\24\20\33\0\1\150\51\0\1\20"+
    "\3\0\11\20\1\151\15\20\25\0\1\20\3\0\6\20"+
    "\1\152\20\20\37\0\1\153\45\0\1\20\3\0\16\20"+
    "\1\154\10\20\47\0\1\155\35\0\1\20\3\0\4\20"+
    "\1\156\22\20\25\0\1\20\3\0\16\20\1\157\10\20"+
    "\47\0\1\160\35\0\1\20\3\0\4\20\1\161\22\20"+
    "\25\0\1\20\3\0\20\20\1\162\6\20\51\0\1\163"+
    "\33\0\1\20\3\0\20\20\1\164\6\20\25\0\1\20"+
    "\3\0\1\165\26\20\31\0\1\166\53\0\1\20\3\0"+
    "\4\20\1\167\22\20\25\0\1\20\3\0\25\20\1\170"+
    "\1\171\56\0\1\172\1\173\25\0\1\20\3\0\21\20"+
    "\1\174\5\20\6\0\1\175\16\0\1\20\3\0\6\20"+
    "\1\176\20\20\37\0\1\177\45\0\1\20\3\0\20\20"+
    "\1\200\6\20\25\0\1\20\3\0\1\20\1\201\11\20"+
    "\1\202\3\20\1\203\7\20\32\0\1\204\11\0\1\205"+
    "\3\0\1\206\34\0\1\20\3\0\6\20\1\207\20\20"+
    "\2\0\1\210\22\0\1\20\3\0\13\20\1\211\13\20"+
    "\44\0\1\212\40\0\1\20\3\0\4\20\1\213\22\20"+
    "\25\0\1\20\3\0\1\214\26\20\25\0\1\20\3\0"+
    "\10\20\1\215\16\20\5\0\1\216\17\0\1\20\3\0"+
    "\10\20\1\217\16\20\5\0\1\220\23\0\1\221\67\0"+
    "\1\216\23\0\1\216\33\0\1\220\23\0\1\220\17\0"+
    "\1\20\3\0\4\20\1\222\22\20\35\0\1\223\47\0"+
    "\1\20\3\0\16\20\1\224\10\20\47\0\1\225\35\0"+
    "\1\20\3\0\17\20\1\226\7\20\25\0\1\20\3\0"+
    "\20\20\1\227\6\20\25\0\1\20\3\0\15\20\1\230"+
    "\11\20\46\0\1\231\36\0\1\20\3\0\4\20\1\232"+
    "\22\20\35\0\1\233\73\0\1\234\33\0\1\20\3\0"+
    "\15\20\1\235\11\20\52\0\1\236\13\0\1\236\16\0"+
    "\1\20\3\0\1\20\1\237\25\20\32\0\1\240\52\0"+
    "\1\20\3\0\16\20\1\241\10\20\25\0\1\20\3\0"+
    "\20\20\1\242\6\20\25\0\1\20\3\0\4\20\1\243"+
    "\22\20\35\0\1\244\73\0\1\245\33\0\1\20\3\0"+
    "\4\20\1\246\22\20\50\0\1\247\34\0\1\20\3\0"+
    "\1\250\26\20\31\0\1\251\53\0\1\20\3\0\20\20"+
    "\1\252\6\20\25\0\1\20\3\0\1\253\26\20\25\0"+
    "\1\20\3\0\1\254\26\20\31\0\1\255\57\0\1\256"+
    "\53\0\1\20\3\0\20\20\1\257\6\20\35\0\1\260"+
    "\47\0\1\20\3\0\13\20\1\261\13\20\44\0\1\262"+
    "\40\0\1\20\3\0\22\20\1\263\4\20\25\0\1\20"+
    "\3\0\21\20\1\264\5\20\6\0\1\265\16\0\1\20"+
    "\3\0\21\20\1\266\5\20\6\0\1\267\43\0\1\267"+
    "\13\0\1\267\43\0\1\265\13\0\1\265\16\0\1\20"+
    "\3\0\1\270\26\20\33\0\1\271\51\0\1\20\3\0"+
    "\4\20\1\272\22\20\35\0\1\273\47\0\1\20\3\0"+
    "\4\20\1\274\22\20\25\0\1\20\3\0\13\20\1\275"+
    "\13\20\41\0\1\276\23\0\1\276\17\0\1\20\3\0"+
    "\21\20\1\277\5\20\6\0\1\300\43\0\1\300\13\0"+
    "\1\300\16\0\1\20\3\0\4\20\1\301\22\20\36\0"+
    "\1\302\46\0\1\20\3\0\21\20\1\303\5\20\6\0"+
    "\1\304\32\0\1\305\23\0\1\305\17\0\1\20\3\0"+
    "\22\20\1\306\4\20\53\0\1\307\37\0\1\310\51\0"+
    "\1\20\3\0\1\311\26\20\31\0\1\312\75\0\1\313"+
    "\35\0\1\20\3\0\3\20\1\314\23\20\34\0\1\315"+
    "\50\0\1\20\3\0\10\20\1\316\16\20\5\0\1\317"+
    "\33\0\1\317\23\0\1\317\17\0\1\20\3\0\21\20"+
    "\1\320\5\20\6\0\1\321\43\0\1\321\13\0\1\321"+
    "\16\0\1\20\3\0\22\20\1\322\4\20\53\0\1\323"+
    "\31\0\1\20\3\0\10\20\1\324\16\20\5\0\1\325"+
    "\33\0\1\325\23\0\1\325\17\0\1\20\3\0\2\20"+
    "\1\326\24\20\33\0\1\327\51\0\1\20\3\0\16\20"+
    "\1\330\10\20\47\0\1\331\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8352];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\2\11\2\1\3\11"+
    "\12\1\4\11\1\1\1\0\1\1\3\0\1\1\1\0"+
    "\12\1\1\0\1\1\1\0\1\11\1\0\13\1\1\0"+
    "\1\1\1\0\4\1\1\0\6\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\3\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\3\1\1\0"+
    "\2\1\1\11\4\1\1\11\2\1\1\0\2\1\1\0"+
    "\3\1\2\11\1\1\1\11\1\1\1\0\4\1\3\0"+
    "\1\1\1\0\1\1\1\0\3\1\1\0\1\1\2\0"+
    "\1\1\1\0\1\1\1\0\3\1\1\0\1\1\1\11"+
    "\1\0\1\1\1\0\1\1\1\0\3\1\2\0\1\1"+
    "\1\0\1\1\1\0\3\1\2\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\2\0\1\1\2\0\1\1\1\0\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public static LinkedList<ErrorLex> errores = new LinkedList<ErrorLex>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerReporteriaCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new ErrorLex(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { ErrorLex err = new ErrorLex("No es parte del lenguaje actual", yytext(), yyline, yycolumn);
                                errores.add(err);
            }
            // fall through
          case 36: break;
          case 2:
            { /*IGNORE*/
            }
            // fall through
          case 37: break;
          case 3:
            { return new Symbol(sym.DOLLAR, yycolumn, yyline, yytext());
            }
            // fall through
          case 38: break;
          case 4:
            { return new Symbol(sym.PARENTESIS_A, yycolumn, yyline, yytext());
            }
            // fall through
          case 39: break;
          case 5:
            { return new Symbol(sym.PARENTESIS_C, yycolumn, yyline, yytext());
            }
            // fall through
          case 40: break;
          case 6:
            { return new Symbol(sym.COMA, yycolumn, yyline, yytext());
            }
            // fall through
          case 41: break;
          case 7:
            { return new Symbol(sym.NUMERO, yycolumn, yyline, yytext());
            }
            // fall through
          case 42: break;
          case 8:
            { return new Symbol(sym.DOS_PUNTOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 43: break;
          case 9:
            { return new Symbol(sym.P_COMA, yycolumn, yyline, yytext());
            }
            // fall through
          case 44: break;
          case 10:
            { return new Symbol(sym.IGUAL, yycolumn, yyline, yytext());
            }
            // fall through
          case 45: break;
          case 11:
            { return new Symbol(sym.IDENTIFICADOR, yycolumn, yyline, yytext());
            }
            // fall through
          case 46: break;
          case 12:
            { return new Symbol(sym.CUADRADA_A, yycolumn, yyline, yytext());
            }
            // fall through
          case 47: break;
          case 13:
            { return new Symbol(sym.CUADRADA_C, yycolumn, yyline, yytext());
            }
            // fall through
          case 48: break;
          case 14:
            { return new Symbol(sym.LLAVE_A, yycolumn, yyline, yytext());
            }
            // fall through
          case 49: break;
          case 15:
            { return new Symbol(sym.LLAVE_C, yycolumn, yyline, yytext());
            }
            // fall through
          case 50: break;
          case 16:
            { return new Symbol(sym.CADENA, yycolumn, yyline, yytext());
            }
            // fall through
          case 51: break;
          case 17:
            { /*return new Symbol(sym.COMENTARIO_LINEAL, yycolumn, yyline, yytext());*/
            }
            // fall through
          case 52: break;
          case 18:
            { return new Symbol(sym.DECIMAL, yycolumn, yyline, yytext());
            }
            // fall through
          case 53: break;
          case 19:
            { /*return new Symbol(sym.COMENTARIO_MULTI, yycolumn, yyline, yytext());*/
            }
            // fall through
          case 54: break;
          case 20:
            { return new Symbol(sym.EJEX, yycolumn, yyline, yytext());
            }
            // fall through
          case 55: break;
          case 21:
            { return new Symbol(sym.DOUBLE, yycolumn, yyline, yytext());
            }
            // fall through
          case 56: break;
          case 22:
            { return new Symbol(sym.STRING, yycolumn, yyline, yytext());
            }
            // fall through
          case 57: break;
          case 23:
            { return new Symbol(sym.TITULO, yycolumn, yyline, yytext());
            }
            // fall through
          case 58: break;
          case 24:
            { return new Symbol(sym.ARCHIVO, yycolumn, yyline, yytext());
            }
            // fall through
          case 59: break;
          case 25:
            { return new Symbol(sym.COMPARE, yycolumn, yyline, yytext());
            }
            // fall through
          case 60: break;
          case 26:
            { return new Symbol(sym.TITULOX, yycolumn, yyline, yytext());
            }
            // fall through
          case 61: break;
          case 27:
            { return new Symbol(sym.TITULOY, yycolumn, yyline, yytext());
            }
            // fall through
          case 62: break;
          case 28:
            { return new Symbol(sym.VALORES, yycolumn, yyline, yytext());
            }
            // fall through
          case 63: break;
          case 29:
            { return new Symbol(sym.GRAFICA_PIE, yycolumn, yyline, yytext());
            }
            // fall through
          case 64: break;
          case 30:
            { return new Symbol(sym.GRAFICA_BARRAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 65: break;
          case 31:
            { return new Symbol(sym.GRAFICA_LINEAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 66: break;
          case 32:
            { return new Symbol(sym.PUNTAJE_GENERAL, yycolumn, yyline, yytext());
            }
            // fall through
          case 67: break;
          case 33:
            { return new Symbol(sym.DEFINIR_GLOBALES, yycolumn, yyline, yytext());
            }
            // fall through
          case 68: break;
          case 34:
            { return new Symbol(sym.PUNTAJE_ESPECIFICO, yycolumn, yyline, yytext());
            }
            // fall through
          case 69: break;
          case 35:
            { return new Symbol(sym.GENERAR_REPORTE_ESTADISTICO, yycolumn, yyline, yytext());
            }
            // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
