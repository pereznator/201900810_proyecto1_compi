
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package LenguajeCopias;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import models.Clase;
import models.Metodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CopiasParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CopiasParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CopiasParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CopiasParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\025\004\000\002\025\004" +
    "\000\002\025\004\000\002\027\003\000\002\027\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\035\003\000\002\035\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\031\003\000\002\031" +
    "\005\000\002\031\006\000\002\032\005\000\002\032\005" +
    "\000\002\033\003\000\002\033\004\000\002\033\005\000" +
    "\002\033\006\000\002\026\003\000\002\026\002\000\002" +
    "\024\011\000\002\003\007\000\002\004\004\000\002\004" +
    "\004\000\002\004\002\000\002\010\006\000\002\010\006" +
    "\000\002\010\006\000\002\010\004\000\002\010\006\000" +
    "\002\006\003\000\002\006\005\000\002\006\002\000\002" +
    "\005\011\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\002\000" +
    "\002\011\011\000\002\011\016\000\002\012\013\000\002" +
    "\012\002\000\002\013\011\000\002\014\014\000\002\014" +
    "\014\000\002\014\014\000\002\014\014\000\002\015\011" +
    "\000\002\016\013\000\002\017\011\000\002\020\011\000" +
    "\002\020\006\000\002\020\010\000\002\020\002\000\002" +
    "\021\007\000\002\022\007\000\002\023\003\000\002\023" +
    "\005\000\002\023\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\014\002\ufffe\004\ufffe\013\ufffe\014\ufffe\015" +
    "\ufffe\001\002\000\014\002\012\004\011\013\006\014\007" +
    "\015\005\001\002\000\004\017\276\001\002\000\004\017" +
    "\275\001\002\000\004\017\274\001\002\000\004\016\266" +
    "\001\002\000\004\017\015\001\002\000\004\002\001\001" +
    "\002\000\014\002\uffff\004\uffff\013\uffff\014\uffff\015\uffff" +
    "\001\002\000\014\002\000\004\000\013\000\014\000\015" +
    "\000\001\002\000\004\007\016\001\002\000\014\010\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\017\uffd7\001\002\000\014\010" +
    "\024\013\006\014\007\015\005\017\021\001\002\000\014" +
    "\010\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\001\002\000" +
    "\006\005\041\016\040\001\002\000\042\010\uffdc\012\026" +
    "\013\uffdc\014\uffdc\015\uffdc\016\025\017\uffdc\024\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\055\uffdc\056\uffdc" +
    "\057\uffdc\001\002\000\014\010\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\017\uffd9\001\002\000\014\002\uffda\004\uffda\013\uffda" +
    "\014\uffda\015\uffda\001\002\000\012\020\030\021\034\022" +
    "\031\023\032\001\002\000\042\002\uffdd\004\uffdd\010\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\017\uffdd\024\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\052\uffdd\053\uffdd\055\uffdd\056\uffdd\057\uffdd" +
    "\001\002\000\036\010\uffd3\013\uffd3\014\uffd3\015\uffd3\017" +
    "\uffd3\024\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\001\002\000\040\010\uffdc\012" +
    "\026\013\uffdc\014\uffdc\015\uffdc\017\uffdc\024\uffdc\047\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\053\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\001\002\000\102\006\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\015\ufffa\017\ufffa\024\ufffa\026\ufffa\027" +
    "\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa" +
    "\056\ufffa\057\ufffa\001\002\000\102\006\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\017\ufff9\024\ufff9" +
    "\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034" +
    "\ufff9\035\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\044\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\057\ufff9\001\002\000\040\010\uffdc" +
    "\012\026\013\uffdc\014\uffdc\015\uffdc\017\uffdc\024\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\055\uffdc\056\uffdc" +
    "\057\uffdc\001\002\000\040\010\uffdc\012\026\013\uffdc\014" +
    "\uffdc\015\uffdc\017\uffdc\024\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\055\uffdc\056\uffdc\057\uffdc\001\002\000" +
    "\036\010\uffd5\013\uffd5\014\uffd5\015\uffd5\017\uffd5\024\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\001\002\000\036\010\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\017\uffd4\024\uffd4\047\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\055\uffd4\056\uffd4\057\uffd4\001\002\000\036" +
    "\010\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\024\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\055\uffd6\056\uffd6" +
    "\057\uffd6\001\002\000\014\017\102\020\101\021\106\022" +
    "\031\023\032\001\002\000\010\006\uffcf\011\uffcf\017\042" +
    "\001\002\000\006\006\uffd1\011\uffd1\001\002\000\006\006" +
    "\045\011\044\001\002\000\004\017\263\001\002\000\004" +
    "\007\046\001\002\000\030\010\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\017\uffc5\024\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\057\uffc5\001\002\000\030\010\064\013\006\014\007\015" +
    "\005\017\063\024\055\047\067\050\057\051\052\052\054" +
    "\057\051\001\002\000\036\010\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\017\uffc7\024\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\055\uffc7\056\uffc7\057\uffc7\001\002\000\004\005" +
    "\257\001\002\000\004\005\251\001\002\000\036\010\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\017\uffc9\024\uffc9\047\uffc9\050" +
    "\uffc9\051\uffc9\052\uffc9\053\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\001\002\000\004\005\230\001\002\000\004\005\206\001" +
    "\002\000\036\010\uffc6\013\uffc6\014\uffc6\015\uffc6\017\uffc6" +
    "\024\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\055" +
    "\uffc6\056\uffc6\057\uffc6\001\002\000\004\007\160\001\002" +
    "\000\036\010\uffcd\013\uffcd\014\uffcd\015\uffcd\017\uffcd\024" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\001\002\000\036\010\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\017\uffcc\024\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\052\uffcc\053\uffcc\055\uffcc\056\uffcc\057\uffcc\001\002\000" +
    "\036\010\uffca\013\uffca\014\uffca\015\uffca\017\uffca\024\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\055\uffca\056" +
    "\uffca\057\uffca\001\002\000\006\005\151\016\040\001\002" +
    "\000\014\010\uffce\013\uffce\014\uffce\015\uffce\017\uffce\001" +
    "\002\000\036\010\uffcb\013\uffcb\014\uffcb\015\uffcb\017\uffcb" +
    "\024\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\055" +
    "\uffcb\056\uffcb\057\uffcb\001\002\000\036\010\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\017\uffc8\024\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\055\uffc8\056\uffc8\057\uffc8\001\002" +
    "\000\004\005\070\001\002\000\012\013\006\014\007\015" +
    "\005\017\071\001\002\000\004\016\137\001\002\000\004" +
    "\016\100\001\002\000\004\006\074\001\002\000\004\007" +
    "\075\001\002\000\030\010\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\017\uffc5\024\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\057" +
    "\uffc5\001\002\000\030\010\077\013\006\014\007\015\005" +
    "\017\063\024\055\047\067\050\057\051\052\052\054\057" +
    "\051\001\002\000\036\010\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\017\uffc0\024\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\001\002\000\014\017\102" +
    "\020\101\021\106\022\031\023\032\001\002\000\102\006" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\017\ufff7\024\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\047\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\001\002" +
    "\000\102\006\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\017\ufff5\024\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\037\ufff5\040" +
    "\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057" +
    "\ufff5\001\002\000\102\006\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\017\ufff6\024\ufff6\026\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\047" +
    "\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6" +
    "\056\ufff6\057\ufff6\001\002\000\042\006\uffe6\012\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\001\002\000\020\012\116\037\110\040\114\041\107" +
    "\042\111\043\112\044\113\001\002\000\102\006\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\017\ufff8" +
    "\024\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033" +
    "\ufff8\034\ufff8\035\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053" +
    "\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\001\002\000\016" +
    "\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\036\ufff2\001" +
    "\002\000\016\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4" +
    "\036\ufff4\001\002\000\016\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\023\ufff1\036\ufff1\001\002\000\016\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\036\ufff0\001\002\000\016\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\036\uffef\001\002" +
    "\000\016\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\036" +
    "\ufff3\001\002\000\016\017\102\020\101\021\106\022\031" +
    "\023\032\036\134\001\002\000\004\017\117\001\002\000" +
    "\016\026\122\027\121\030\123\031\125\032\124\033\126" +
    "\001\002\000\014\017\102\020\101\021\106\022\031\023" +
    "\032\001\002\000\014\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\001\002\000\014\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\001\002\000\014\017\uffea\020\uffea\021\uffea" +
    "\022\uffea\023\uffea\001\002\000\014\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\001\002\000\014\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\001\002\000\014\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\001\002\000\020\012\130" +
    "\037\110\040\114\041\107\042\111\043\112\044\113\001" +
    "\002\000\004\017\131\001\002\000\006\045\132\046\133" +
    "\001\002\000\004\006\uffbf\001\002\000\004\006\uffbe\001" +
    "\002\000\014\017\102\020\101\021\106\022\031\023\032" +
    "\001\002\000\042\006\uffe5\012\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\001\002\000" +
    "\042\006\uffe4\012\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\043\uffe4\044\uffe4\001\002\000\014\017\102" +
    "\020\101\021\106\022\031\023\032\001\002\000\020\012" +
    "\141\037\110\040\114\041\107\042\111\043\112\044\113" +
    "\001\002\000\004\017\142\001\002\000\016\026\122\027" +
    "\121\030\123\031\125\032\124\033\126\001\002\000\014" +
    "\017\102\020\101\021\106\022\031\023\032\001\002\000" +
    "\020\012\145\037\110\040\114\041\107\042\111\043\112" +
    "\044\113\001\002\000\004\017\146\001\002\000\006\045" +
    "\147\046\150\001\002\000\004\006\uffbd\001\002\000\004" +
    "\006\uffbc\001\002\000\020\006\uffb0\011\uffb0\017\102\020" +
    "\101\021\106\022\031\023\032\001\002\000\006\006\155" +
    "\011\154\001\002\000\006\006\uffb2\011\uffb2\001\002\000" +
    "\014\017\102\020\101\021\106\022\031\023\032\001\002" +
    "\000\040\010\uffdc\012\026\013\uffdc\014\uffdc\015\uffdc\017" +
    "\uffdc\024\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\055\uffdc\056\uffdc\057\uffdc\001\002\000\036\010\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\017\uffb3\024\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\055\uffb3\056\uffb3\057\uffb3\001" +
    "\002\000\006\006\uffb1\011\uffb1\001\002\000\030\010\uffc5" +
    "\013\uffc5\014\uffc5\015\uffc5\017\uffc5\024\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\057\uffc5\001\002\000\030\010\162" +
    "\013\006\014\007\015\005\017\063\024\055\047\067\050" +
    "\057\051\052\052\054\057\051\001\002\000\004\051\163" +
    "\001\002\000\004\005\164\001\002\000\016\017\102\020" +
    "\101\021\106\022\031\023\032\036\170\001\002\000\024" +
    "\006\uffe1\026\122\027\121\030\123\031\125\032\124\033" +
    "\126\034\uffe1\035\uffe1\001\002\000\010\006\200\034\177" +
    "\035\201\001\002\000\032\026\122\027\121\030\123\031" +
    "\125\032\124\033\126\037\110\040\114\041\107\042\111" +
    "\043\112\044\113\001\002\000\014\017\102\020\101\021" +
    "\106\022\031\023\032\001\002\000\024\006\uffe0\026\122" +
    "\027\121\030\123\031\125\032\124\033\126\034\uffe0\035" +
    "\uffe0\001\002\000\014\017\102\020\101\021\106\022\031" +
    "\023\032\001\002\000\040\006\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\037\110" +
    "\040\114\041\107\042\111\043\112\044\113\001\002\000" +
    "\014\017\102\020\101\021\106\022\031\023\032\001\002" +
    "\000\040\006\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\037\110\040\114\041\107" +
    "\042\111\043\112\044\113\001\002\000\016\017\102\020" +
    "\101\021\106\022\031\023\032\036\204\001\002\000\016" +
    "\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\036\uffee\001" +
    "\002\000\040\010\uffdc\012\026\013\uffdc\014\uffdc\015\uffdc" +
    "\017\uffdc\024\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053" +
    "\uffdc\055\uffdc\056\uffdc\057\uffdc\001\002\000\016\017\uffed" +
    "\020\uffed\021\uffed\022\uffed\023\uffed\036\uffed\001\002\000" +
    "\036\010\uffba\013\uffba\014\uffba\015\uffba\017\uffba\024\uffba" +
    "\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\055\uffba\056" +
    "\uffba\057\uffba\001\002\000\024\006\uffdf\026\122\027\121" +
    "\030\123\031\125\032\124\033\126\034\uffdf\035\uffdf\001" +
    "\002\000\014\017\102\020\101\021\106\022\031\023\032" +
    "\001\002\000\024\006\uffde\026\122\027\121\030\123\031" +
    "\125\032\124\033\126\034\uffde\035\uffde\001\002\000\016" +
    "\017\102\020\101\021\106\022\031\023\032\036\170\001" +
    "\002\000\010\006\210\034\177\035\201\001\002\000\004" +
    "\007\211\001\002\000\030\010\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\017\uffc5\024\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\057\uffc5\001\002\000\030\010\213\013\006\014\007\015" +
    "\005\017\063\024\055\047\067\050\057\051\052\052\054" +
    "\057\051\001\002\000\040\010\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\017\uffc4\024\uffc4\025\uffc1\047\uffc4\050\uffc4\051\uffc4" +
    "\052\uffc4\053\uffc4\055\uffc4\056\uffc4\057\uffc4\001\002\000" +
    "\004\025\215\001\002\000\006\007\217\024\216\001\002" +
    "\000\004\005\222\001\002\000\030\010\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\017\uffc5\024\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\057\uffc5\001\002\000\030\010\221\013\006\014" +
    "\007\015\005\017\063\024\055\047\067\050\057\051\052" +
    "\052\054\057\051\001\002\000\036\010\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\017\uffc3\024\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\055\uffc3\056\uffc3\057\uffc3\001\002\000" +
    "\016\017\102\020\101\021\106\022\031\023\032\036\170" +
    "\001\002\000\010\006\224\034\177\035\201\001\002\000" +
    "\004\007\225\001\002\000\030\010\uffc5\013\uffc5\014\uffc5" +
    "\015\uffc5\017\uffc5\024\uffc5\047\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\057\uffc5\001\002\000\030\010\227\013\006\014\007" +
    "\015\005\017\063\024\055\047\067\050\057\051\052\052" +
    "\054\057\051\001\002\000\004\025\uffc2\001\002\000\004" +
    "\017\231\001\002\000\004\006\232\001\002\000\004\007" +
    "\233\001\002\000\010\010\uffb5\053\uffb5\056\uffb5\001\002" +
    "\000\010\010\236\053\237\056\235\001\002\000\004\054" +
    "\245\001\002\000\036\010\uffb9\013\uffb9\014\uffb9\015\uffb9" +
    "\017\uffb9\024\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\001\002\000\014\017\102" +
    "\020\101\021\106\022\031\023\032\001\002\000\004\054" +
    "\241\001\002\000\030\013\uffc5\014\uffc5\015\uffc5\017\uffc5" +
    "\024\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\055\uffc5\057" +
    "\uffc5\001\002\000\030\013\006\014\007\015\005\017\063" +
    "\024\055\047\067\050\057\051\052\052\054\055\243\057" +
    "\051\001\002\000\012\010\uffdc\012\026\053\uffdc\056\uffdc" +
    "\001\002\000\010\010\uffb8\053\uffb8\056\uffb8\001\002\000" +
    "\036\010\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\024\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\055\uffc5\056" +
    "\uffc5\057\uffc5\001\002\000\036\010\uffb7\013\006\014\007" +
    "\015\005\017\063\024\055\047\067\050\057\051\052\052" +
    "\054\053\uffb7\055\247\056\uffb7\057\051\001\002\000\012" +
    "\010\uffdc\012\026\053\uffdc\056\uffdc\001\002\000\010\010" +
    "\uffb6\053\uffb6\056\uffb6\001\002\000\016\017\102\020\101" +
    "\021\106\022\031\023\032\036\170\001\002\000\010\006" +
    "\253\034\177\035\201\001\002\000\004\007\254\001\002" +
    "\000\030\010\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\024" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\057\uffc5\001\002" +
    "\000\030\010\256\013\006\014\007\015\005\017\063\024" +
    "\055\047\067\050\057\051\052\052\054\057\051\001\002" +
    "\000\036\010\uffbb\013\uffbb\014\uffbb\015\uffbb\017\uffbb\024" +
    "\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\055\uffbb" +
    "\056\uffbb\057\uffbb\001\002\000\014\017\102\020\101\021" +
    "\106\022\031\023\032\001\002\000\020\006\261\037\110" +
    "\040\114\041\107\042\111\043\112\044\113\001\002\000" +
    "\040\010\uffdc\012\026\013\uffdc\014\uffdc\015\uffdc\017\uffdc" +
    "\024\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\055" +
    "\uffdc\056\uffdc\057\uffdc\001\002\000\036\010\uffb4\013\uffb4" +
    "\014\uffb4\015\uffb4\017\uffb4\024\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\052\uffb4\053\uffb4\055\uffb4\056\uffb4\057\uffb4\001\002" +
    "\000\006\006\uffd0\011\uffd0\001\002\000\040\010\uffdc\012" +
    "\026\013\uffdc\014\uffdc\015\uffdc\017\uffdc\024\uffdc\047\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\053\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\001\002\000\036\010\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\017\uffd2\024\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\001\002\000\004\060\267" +
    "\001\002\000\004\005\270\001\002\000\004\021\271\001" +
    "\002\000\004\006\272\001\002\000\016\002\uffdc\004\uffdc" +
    "\012\026\013\uffdc\014\uffdc\015\uffdc\001\002\000\014\002" +
    "\uffdb\004\uffdb\013\uffdb\014\uffdb\015\uffdb\001\002\000\042" +
    "\010\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017" +
    "\ufffc\024\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\001\002\000\042\010\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\024\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\055\ufffd\056" +
    "\ufffd\057\ufffd\001\002\000\042\010\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\017\ufffb\024\ufffb\047\ufffb\050" +
    "\ufffb\051\ufffb\052\ufffb\053\ufffb\055\ufffb\056\ufffb\057\ufffb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\004\002\003\001\001\000\010\003\013\024" +
    "\012\025\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\016\001\001\000\010\005\017\010" +
    "\022\025\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\035\001\001\000\004\026\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\102\030\263\001\001\000\004\006\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\046\001\001\000\024" +
    "\010\057\011\060\013\064\015\061\016\052\017\065\021" +
    "\047\022\055\025\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\072\025\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\075\001\001\000\024\010" +
    "\057\011\060\013\064\015\061\016\052\017\065\021\047" +
    "\022\055\025\021\001\001\000\002\001\001\000\010\027" +
    "\102\030\103\031\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\102\030\134\001\001" +
    "\000\002\001\001\000\004\036\117\001\001\000\010\027" +
    "\102\030\103\031\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\102\030\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\027\102\030\103\031\137\001" +
    "\001\000\004\034\114\001\001\000\002\001\001\000\004" +
    "\036\142\001\001\000\010\027\102\030\103\031\143\001" +
    "\001\000\004\034\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\151\027\102\030\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\102\030\156\001\001\000\004\026" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\160\001\001\000\024\010\057\011\060\013\064\015" +
    "\061\016\052\017\065\021\047\022\055\025\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\027\102\030" +
    "\103\031\166\032\164\033\165\001\001\000\004\036\171" +
    "\001\001\000\004\035\175\001\001\000\006\034\114\036" +
    "\173\001\001\000\012\027\102\030\103\031\166\032\170" +
    "\001\001\000\004\036\171\001\001\000\010\027\102\030" +
    "\103\031\172\001\001\000\004\034\114\001\001\000\010" +
    "\027\102\030\103\031\174\001\001\000\004\034\114\001" +
    "\001\000\012\027\102\030\103\031\166\032\202\001\001" +
    "\000\002\001\001\000\004\026\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\171\001\001\000\012" +
    "\027\102\030\103\031\166\032\204\001\001\000\004\036" +
    "\171\001\001\000\014\027\102\030\103\031\166\032\164" +
    "\033\206\001\001\000\004\035\175\001\001\000\002\001" +
    "\001\000\004\007\211\001\001\000\024\010\057\011\060" +
    "\013\064\015\061\016\052\017\065\021\047\022\055\025" +
    "\021\001\001\000\004\012\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\217\001" +
    "\001\000\024\010\057\011\060\013\064\015\061\016\052" +
    "\017\065\021\047\022\055\025\021\001\001\000\002\001" +
    "\001\000\014\027\102\030\103\031\166\032\164\033\222" +
    "\001\001\000\004\035\175\001\001\000\002\001\001\000" +
    "\004\007\225\001\001\000\024\010\057\011\060\013\064" +
    "\015\061\016\052\017\065\021\047\022\055\025\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\102" +
    "\030\237\001\001\000\002\001\001\000\004\007\241\001" +
    "\001\000\024\010\057\011\060\013\064\015\061\016\052" +
    "\017\065\021\047\022\055\025\021\001\001\000\004\026" +
    "\243\001\001\000\002\001\001\000\004\007\245\001\001" +
    "\000\024\010\057\011\060\013\064\015\061\016\052\017" +
    "\065\021\047\022\055\025\021\001\001\000\004\026\247" +
    "\001\001\000\002\001\001\000\014\027\102\030\103\031" +
    "\166\032\164\033\251\001\001\000\004\035\175\001\001" +
    "\000\002\001\001\000\004\007\254\001\001\000\024\010" +
    "\057\011\060\013\064\015\061\016\052\017\065\021\047" +
    "\022\055\025\021\001\001\000\002\001\001\000\010\027" +
    "\102\030\103\031\257\001\001\000\004\034\114\001\001" +
    "\000\004\026\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CopiasParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CopiasParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CopiasParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol sim){
        System.out.println("Error recuperable: " + sim.value + "| Linea: " + (sim.right + 1) + "| Columna: " + (sim.left + 1));
    }
    public void unrecovered_syntax_error(Symbol sim){
        System.out.println("Error NO recuperable: " + sim.value + "| Linea: " + (sim.right + 1) + "| Columna: " + (sim.left + 1));
    }
    public Clase clase = new Clase();
    public Metodo metodo = new Metodo();
    public LinkedList<Clase> clases = new LinkedList<Clase>();
    public LinkedList<String> variables = new LinkedList<String>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CopiasParser$actions {




  private final CopiasParser parser;

  /** Constructor */
  CUP$CopiasParser$actions(CopiasParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CopiasParser$do_action_part00000000(
    int                        CUP$CopiasParser$act_num,
    java_cup.runtime.lr_parser CUP$CopiasParser$parser,
    java.util.Stack            CUP$CopiasParser$stack,
    int                        CUP$CopiasParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CopiasParser$result;

      /* select the action based on the action number */
      switch (CUP$CopiasParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= libre EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)).value;
		RESULT = start_val;
              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CopiasParser$parser.done_parsing();
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // libre ::= libre clase 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("libre",0, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // libre ::= libre importacion 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("libre",0, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // libre ::= 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("libre",0, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // initDeclaracion ::= VAR IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CopiasParser$stack.peek()).value;
		
            variables.add(a.toString());
        
              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("initDeclaracion",19, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // initDeclaracion ::= LET IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CopiasParser$stack.peek()).value;
		
            variables.add(a.toString());
        
              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("initDeclaracion",19, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // initDeclaracion ::= CONST IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CopiasParser$stack.peek()).value;
		
            variables.add(a.toString());
        
              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("initDeclaracion",19, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // boolValores ::= TRUE 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("boolValores",21, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // boolValores ::= FALSE 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("boolValores",21, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valores ::= CADENA 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("valores",22, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // valores ::= NUMERO 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("valores",22, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // valores ::= boolValores 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("valores",22, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // valores ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("valores",22, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operadorAritmetico ::= MAS 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operadorAritmetico ::= MENOS 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operadorAritmetico ::= ASTERISCO 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operadorAritmetico ::= DIAGONAL 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operadorAritmetico ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operadorAritmetico ::= MODULO 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operadoresLogicos ::= AND 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("operadoresLogicos",27, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operadoresLogicos ::= OR 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("operadoresLogicos",27, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operadoresRelacionales ::= DOBLE_IGUAL 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("operadoresRelacionales",28, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operadoresRelacionales ::= DESIGUAL 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("operadoresRelacionales",28, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operadoresRelacionales ::= MENOR 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("operadoresRelacionales",28, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operadoresRelacionales ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("operadoresRelacionales",28, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operadoresRelacionales ::= MAYOR 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("operadoresRelacionales",28, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operadoresRelacionales ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("operadoresRelacionales",28, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operacion ::= valores 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("operacion",23, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacion ::= operacion operadorAritmetico valores 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("operacion",23, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacion ::= operacion operadorAritmetico NOT valores 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("operacion",23, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-3)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // relacion ::= operacion operadoresRelacionales operacion 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // relacion ::= relacion operadoresRelacionales operacion 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicion ::= relacion 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicion ::= NOT relacion 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicion ::= condicion operadoresLogicos relacion 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicion ::= condicion operadoresLogicos NOT relacion 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-3)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // finLinea ::= P_COMA 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("finLinea",20, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // finLinea ::= 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("finLinea",20, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // importacion ::= initDeclaracion IGUAL REQUIRE PARENTESIS_A CADENA PARENTESIS_C finLinea 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("importacion",18, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-6)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // clase ::= CLASS IDENTIFICADOR LLAVE_A contClase LLAVE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CopiasParser$stack.peek()).value;
		
        clase.nombre = b.toString();
        clase.lineas = cright - aright + 1;
        clases.add(clase);
        clase = new Clase();
    
              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("clase",1, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // contClase ::= contClase declaracion 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("contClase",2, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // contClase ::= contClase metodo 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("contClase",2, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // contClase ::= 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("contClase",2, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion ::= initDeclaracion IGUAL NUMERO finLinea 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-3)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion ::= initDeclaracion IGUAL CADENA finLinea 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-3)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion ::= initDeclaracion IGUAL boolValores finLinea 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-3)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion ::= initDeclaracion finLinea 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion ::= IDENTIFICADOR IGUAL valores finLinea 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-3)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // metodoParams ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CopiasParser$stack.peek()).value;
		
            metodo.params.add(a.toString());
        
              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("metodoParams",4, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // metodoParams ::= metodoParams COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CopiasParser$stack.peek()).value;
		
            metodo.params.add(a.toString());
        
              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("metodoParams",4, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // metodoParams ::= 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("metodoParams",4, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // metodo ::= IDENTIFICADOR PARENTESIS_A metodoParams PARENTESIS_C LLAVE_A contMetodo LLAVE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$CopiasParser$stack.peek()).value;
		
        metodo.nombre = a.toString();
        metodo.lineas = bright - aright + 1;
        clase.metodos.add(metodo);
        metodo = new Metodo();
    
              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("metodo",3, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-6)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // contMetodo ::= contMetodo declaracion 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("contMetodo",5, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contMetodo ::= contMetodo if 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("contMetodo",5, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contMetodo ::= contMetodo for 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("contMetodo",5, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contMetodo ::= contMetodo while 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("contMetodo",5, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contMetodo ::= contMetodo dowhile 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("contMetodo",5, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // contMetodo ::= contMetodo switch 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("contMetodo",5, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // contMetodo ::= contMetodo consol 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("contMetodo",5, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // contMetodo ::= contMetodo llamada 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("contMetodo",5, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // contMetodo ::= 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("contMetodo",5, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if ::= IF PARENTESIS_A condicion PARENTESIS_C LLAVE_A contMetodo LLAVE_C 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-6)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if ::= IF PARENTESIS_A condicion PARENTESIS_C LLAVE_A contMetodo LLAVE_C elif ELSE LLAVE_A contMetodo LLAVE_C 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-11)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // elif ::= elif ELSE IF PARENTESIS_A condicion PARENTESIS_C LLAVE_A contMetodo LLAVE_C 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("elif",8, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-8)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // elif ::= 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("elif",8, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // for ::= FOR PARENTESIS_A condFor PARENTESIS_C LLAVE_A contMetodo LLAVE_C 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("for",9, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-6)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condFor ::= initDeclaracion IGUAL operacion P_COMA IDENTIFICADOR operadoresRelacionales operacion P_COMA IDENTIFICADOR DOBLE_MAS 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("condFor",10, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-9)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condFor ::= initDeclaracion IGUAL operacion P_COMA IDENTIFICADOR operadoresRelacionales operacion P_COMA IDENTIFICADOR DOBLE_MENOS 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("condFor",10, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-9)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condFor ::= IDENTIFICADOR IGUAL operacion P_COMA IDENTIFICADOR operadoresRelacionales operacion P_COMA IDENTIFICADOR DOBLE_MAS 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("condFor",10, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-9)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condFor ::= IDENTIFICADOR IGUAL operacion P_COMA IDENTIFICADOR operadoresRelacionales operacion P_COMA IDENTIFICADOR DOBLE_MENOS 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("condFor",10, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-9)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // while ::= WHILE PARENTESIS_A condicion PARENTESIS_C LLAVE_A contMetodo LLAVE_C 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("while",11, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-6)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // dowhile ::= DO LLAVE_A contMetodo LLAVE_C WHILE PARENTESIS_A condicion PARENTESIS_C finLinea 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("dowhile",12, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-8)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // switch ::= SWITCH PARENTESIS_A IDENTIFICADOR PARENTESIS_C LLAVE_A contSwitch LLAVE_C 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("switch",13, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-6)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // contSwitch ::= contSwitch CASE valores DOS_PUNTOS contMetodo BREAK finLinea 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("contSwitch",14, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-6)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // contSwitch ::= contSwitch DEFAULT DOS_PUNTOS contMetodo 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("contSwitch",14, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-3)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // contSwitch ::= contSwitch DEFAULT DOS_PUNTOS contMetodo BREAK finLinea 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("contSwitch",14, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-5)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // contSwitch ::= 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("contSwitch",14, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // consol ::= CONSOLELOG PARENTESIS_A operacion PARENTESIS_C finLinea 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("consol",15, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // llamada ::= IDENTIFICADOR PARENTESIS_A llamadaParams PARENTESIS_C finLinea 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("llamada",16, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // llamadaParams ::= valores 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("llamadaParams",17, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // llamadaParams ::= llamadaParams COMA valores 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("llamadaParams",17, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.elementAt(CUP$CopiasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // llamadaParams ::= 
            {
              Object RESULT =null;

              CUP$CopiasParser$result = parser.getSymbolFactory().newSymbol("llamadaParams",17, ((java_cup.runtime.Symbol)CUP$CopiasParser$stack.peek()), RESULT);
            }
          return CUP$CopiasParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CopiasParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CopiasParser$do_action(
    int                        CUP$CopiasParser$act_num,
    java_cup.runtime.lr_parser CUP$CopiasParser$parser,
    java.util.Stack            CUP$CopiasParser$stack,
    int                        CUP$CopiasParser$top)
    throws java.lang.Exception
    {
              return CUP$CopiasParser$do_action_part00000000(
                               CUP$CopiasParser$act_num,
                               CUP$CopiasParser$parser,
                               CUP$CopiasParser$stack,
                               CUP$CopiasParser$top);
    }
}

}
