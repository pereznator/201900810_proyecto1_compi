// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: ReporteriaLexerCup.jflex

//Primera Parte
/*----------------------------------Codigo de Usuario-----------------------------------*/
package Reporteria;

import java.util.LinkedList;
import java_cup.runtime.Symbol;
import models.ErrorLex;

//Segunda Parte
/*-----------------------------------Opciones y Declaraciones---------------------------*/


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerReporteriaCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\1\22\0\1\1\1\0"+
    "\1\4\1\5\1\6\2\0\1\7\1\10\1\11\1\12"+
    "\1\0\1\13\1\0\1\14\1\0\12\15\1\16\1\17"+
    "\1\0\1\20\3\0\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\33\1\41\1\42\1\43\1\44"+
    "\1\45\1\33\1\46\1\47\1\33\1\50\1\0\1\51"+
    "\3\0\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\33\1\41\1\42\1\43\1\44\1\45\1\33"+
    "\1\46\1\47\1\33\1\52\1\0\1\53\7\0\1\3"+
    "\252\0\2\54\115\0\1\55\u01a8\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\12\13\1\14\1\15"+
    "\1\16\1\17\1\1\1\0\1\20\4\0\12\13\1\0"+
    "\1\13\1\0\1\21\1\0\1\22\12\13\1\0\1\13"+
    "\1\0\1\23\3\13\1\0\1\13\1\24\4\13\1\0"+
    "\1\13\1\0\2\13\1\0\2\13\1\0\3\13\1\0"+
    "\2\13\1\0\1\13\1\0\2\13\1\0\2\13\1\0"+
    "\1\25\2\13\1\0\1\13\2\26\2\27\1\13\2\30"+
    "\1\31\1\13\1\0\2\13\1\0\1\13\1\32\1\33"+
    "\1\32\1\33\2\34\1\13\1\0\4\13\3\0\3\13"+
    "\1\0\3\13\1\0\1\13\2\0\1\13\1\0\2\13"+
    "\1\0\3\13\1\0\2\35\1\0\1\13\1\0\2\13"+
    "\1\0\3\13\2\0\1\13\1\0\2\13\1\0\3\13"+
    "\2\0\1\13\1\0\2\13\1\0\1\13\2\36\2\37"+
    "\1\13\1\0\2\13\1\0\2\13\1\0\1\40\2\41"+
    "\2\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\2\42\1\13\1\0\1\13\1\0\1\13\1\0\1\13"+
    "\1\0\1\13\1\0\1\13\1\0\1\13\1\0\2\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\56\0\346\0\56"+
    "\0\56\0\56\0\u0114\0\56\0\56\0\56\0\u0142\0\u0170"+
    "\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0"+
    "\0\56\0\56\0\56\0\56\0\u030e\0\212\0\56\0\u033c"+
    "\0\u036a\0\346\0\u0398\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e"+
    "\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee"+
    "\0\56\0\u061c\0\u0398\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702"+
    "\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872"+
    "\0\u036a\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0170\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6"+
    "\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66"+
    "\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6"+
    "\0\u0e04\0\u0e32\0\u0e60\0\u0170\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18"+
    "\0\u0170\0\56\0\u0f46\0\u0f74\0\u0fa2\0\u0170\0\56\0\u0170"+
    "\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u0170\0\u0170"+
    "\0\56\0\56\0\u0170\0\56\0\u10e4\0\u1112\0\u1140\0\u116e"+
    "\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de"+
    "\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e"+
    "\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590\0\u15be"+
    "\0\u15ec\0\u0170\0\56\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2"+
    "\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842"+
    "\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984\0\u19b2"+
    "\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u0170\0\56"+
    "\0\u0170\0\56\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda"+
    "\0\u1c08\0\u1c36\0\u0170\0\u0170\0\56\0\u1c64\0\u1c92\0\u1cc0"+
    "\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u0170\0\56"+
    "\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16\0\u1f44"+
    "\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc\0\u202a\0\u2058\0\u0170\0\56";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\2\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\20\1\24\10\20"+
    "\1\25\1\20\1\26\1\27\1\20\1\30\2\20\1\31"+
    "\1\32\1\33\1\34\1\2\1\35\57\0\2\3\53\0"+
    "\4\36\1\37\51\36\5\0\1\40\4\0\1\41\43\0"+
    "\7\42\1\37\46\42\14\0\1\43\1\13\55\0\1\20"+
    "\3\0\20\20\1\44\6\20\23\0\1\20\3\0\27\20"+
    "\23\0\1\20\3\0\16\20\1\45\10\20\23\0\1\20"+
    "\3\0\4\20\1\46\11\20\1\47\10\20\23\0\1\20"+
    "\3\0\11\20\1\50\15\20\23\0\1\20\3\0\4\20"+
    "\1\51\13\20\1\52\6\20\23\0\1\20\3\0\23\20"+
    "\1\53\3\20\23\0\1\20\3\0\22\20\1\54\4\20"+
    "\23\0\1\20\3\0\10\20\1\55\16\20\4\0\1\56"+
    "\16\0\1\20\3\0\1\57\26\20\51\0\1\60\12\0"+
    "\2\40\1\61\1\0\52\40\3\41\1\0\6\41\1\62"+
    "\43\41\15\0\1\63\55\0\1\20\3\0\2\20\1\64"+
    "\24\20\23\0\1\20\3\0\14\20\1\65\12\20\23\0"+
    "\1\20\3\0\5\20\1\66\21\20\23\0\1\20\3\0"+
    "\23\20\1\67\3\20\23\0\1\20\3\0\4\20\1\70"+
    "\22\20\23\0\1\20\3\0\15\20\1\71\11\20\23\0"+
    "\1\20\3\0\1\72\26\20\23\0\1\20\3\0\15\20"+
    "\1\73\11\20\23\0\1\20\3\0\20\20\1\74\6\20"+
    "\23\0\1\20\3\0\22\20\1\75\4\20\51\0\1\76"+
    "\27\0\1\20\3\0\13\20\1\77\13\20\47\0\1\100"+
    "\14\0\3\41\1\0\1\41\1\101\4\41\1\62\43\41"+
    "\15\0\1\20\3\0\7\20\1\102\17\20\23\0\1\20"+
    "\3\0\17\20\1\103\7\20\23\0\1\20\3\0\10\20"+
    "\1\104\16\20\4\0\1\105\16\0\1\20\3\0\1\20"+
    "\1\106\25\20\23\0\1\20\3\0\25\20\1\107\1\20"+
    "\23\0\1\20\3\0\4\20\1\110\22\20\23\0\1\20"+
    "\3\0\5\20\1\111\21\20\23\0\1\20\3\0\22\20"+
    "\1\112\4\20\23\0\1\20\3\0\10\20\1\113\16\20"+
    "\4\0\1\114\16\0\1\20\3\0\23\20\1\115\3\20"+
    "\52\0\1\116\26\0\1\20\3\0\16\20\1\117\10\20"+
    "\37\0\1\114\22\0\1\114\16\0\1\20\3\0\10\20"+
    "\1\120\16\20\4\0\1\121\16\0\1\20\3\0\1\122"+
    "\26\20\23\0\1\20\3\0\15\20\1\123\11\20\44\0"+
    "\1\124\34\0\1\20\3\0\13\20\1\125\13\20\23\0"+
    "\1\20\3\0\20\20\1\126\6\20\23\0\1\20\3\0"+
    "\10\20\1\127\16\20\4\0\1\130\16\0\1\20\3\0"+
    "\1\131\26\20\23\0\1\20\3\0\15\20\1\132\11\20"+
    "\44\0\1\133\34\0\1\20\3\0\13\20\1\134\13\20"+
    "\42\0\1\135\36\0\1\20\3\0\20\20\1\136\6\20"+
    "\23\0\1\20\3\0\24\20\1\137\2\20\53\0\1\140"+
    "\25\0\1\20\3\0\20\20\1\141\6\20\23\0\1\20"+
    "\3\0\10\20\1\142\16\20\4\0\1\143\32\0\1\143"+
    "\22\0\1\143\16\0\1\20\3\0\4\20\1\144\22\20"+
    "\23\0\1\20\3\0\1\145\26\20\23\0\1\20\3\0"+
    "\2\20\1\146\24\20\31\0\1\147\47\0\1\20\3\0"+
    "\11\20\1\150\15\20\23\0\1\20\3\0\6\20\1\151"+
    "\20\20\35\0\1\152\43\0\1\20\3\0\16\20\1\153"+
    "\10\20\45\0\1\154\33\0\1\20\3\0\4\20\1\155"+
    "\22\20\23\0\1\20\3\0\16\20\1\156\10\20\45\0"+
    "\1\157\33\0\1\20\3\0\4\20\1\160\22\20\23\0"+
    "\1\20\3\0\20\20\1\161\6\20\47\0\1\162\31\0"+
    "\1\20\3\0\20\20\1\163\6\20\23\0\1\20\3\0"+
    "\1\164\26\20\27\0\1\165\51\0\1\20\3\0\4\20"+
    "\1\166\22\20\23\0\1\20\3\0\25\20\1\167\1\170"+
    "\54\0\1\171\1\172\23\0\1\20\3\0\21\20\1\173"+
    "\5\20\5\0\1\174\15\0\1\20\3\0\6\20\1\175"+
    "\20\20\35\0\1\176\43\0\1\20\3\0\20\20\1\177"+
    "\6\20\23\0\1\20\3\0\1\20\1\200\11\20\1\201"+
    "\3\20\1\202\7\20\30\0\1\203\11\0\1\204\3\0"+
    "\1\205\32\0\1\20\3\0\4\20\1\206\1\20\1\207"+
    "\20\20\23\0\1\20\3\0\13\20\1\210\13\20\42\0"+
    "\1\211\36\0\1\20\3\0\4\20\1\212\22\20\23\0"+
    "\1\20\3\0\1\213\26\20\23\0\1\20\3\0\10\20"+
    "\1\214\16\20\4\0\1\215\16\0\1\20\3\0\10\20"+
    "\1\216\16\20\4\0\1\217\22\0\1\220\65\0\1\215"+
    "\22\0\1\215\32\0\1\217\22\0\1\217\16\0\1\20"+
    "\3\0\21\20\1\221\5\20\5\0\1\222\15\0\1\20"+
    "\3\0\4\20\1\223\22\20\23\0\1\20\3\0\16\20"+
    "\1\224\10\20\45\0\1\225\33\0\1\20\3\0\17\20"+
    "\1\226\7\20\23\0\1\20\3\0\20\20\1\227\6\20"+
    "\23\0\1\20\3\0\15\20\1\230\11\20\44\0\1\231"+
    "\34\0\1\20\3\0\4\20\1\232\22\20\33\0\1\233"+
    "\71\0\1\234\31\0\1\20\3\0\17\20\1\235\7\20"+
    "\46\0\1\236\32\0\1\20\3\0\15\20\1\237\11\20"+
    "\23\0\1\20\3\0\1\20\1\240\25\20\30\0\1\241"+
    "\50\0\1\20\3\0\16\20\1\242\10\20\23\0\1\20"+
    "\3\0\20\20\1\243\6\20\23\0\1\20\3\0\4\20"+
    "\1\244\22\20\33\0\1\245\71\0\1\246\31\0\1\20"+
    "\3\0\4\20\1\247\22\20\33\0\1\250\45\0\1\20"+
    "\3\0\4\20\1\251\22\20\23\0\1\20\3\0\1\252"+
    "\26\20\27\0\1\253\51\0\1\20\3\0\20\20\1\254"+
    "\6\20\23\0\1\20\3\0\1\255\26\20\23\0\1\20"+
    "\3\0\1\256\26\20\27\0\1\257\55\0\1\260\51\0"+
    "\1\20\3\0\2\20\1\261\24\20\31\0\1\262\47\0"+
    "\1\20\3\0\20\20\1\263\6\20\23\0\1\20\3\0"+
    "\13\20\1\264\13\20\42\0\1\265\36\0\1\20\3\0"+
    "\22\20\1\266\4\20\23\0\1\20\3\0\21\20\1\267"+
    "\5\20\5\0\1\270\15\0\1\20\3\0\21\20\1\271"+
    "\5\20\5\0\1\272\42\0\1\272\12\0\1\272\42\0"+
    "\1\270\12\0\1\270\15\0\1\20\3\0\10\20\1\273"+
    "\16\20\4\0\1\274\32\0\1\274\22\0\1\274\16\0"+
    "\1\20\3\0\1\275\26\20\23\0\1\20\3\0\4\20"+
    "\1\276\22\20\33\0\1\277\45\0\1\20\3\0\4\20"+
    "\1\300\22\20\23\0\1\20\3\0\5\20\1\301\21\20"+
    "\34\0\1\302\44\0\1\20\3\0\13\20\1\303\13\20"+
    "\23\0\1\20\3\0\21\20\1\304\5\20\5\0\1\305"+
    "\42\0\1\305\12\0\1\305\15\0\1\20\3\0\4\20"+
    "\1\306\22\20\23\0\1\20\3\0\10\20\1\307\16\20"+
    "\4\0\1\310\32\0\1\310\22\0\1\310\16\0\1\20"+
    "\3\0\21\20\1\311\5\20\5\0\1\312\15\0\1\20"+
    "\3\0\2\20\1\313\24\20\31\0\1\314\47\0\1\20"+
    "\3\0\22\20\1\315\4\20\51\0\1\316\27\0\1\20"+
    "\3\0\16\20\1\317\10\20\45\0\1\320\33\0\1\20"+
    "\3\0\1\321\26\20\27\0\1\322\51\0\1\20\3\0"+
    "\3\20\1\323\23\20\32\0\1\324\46\0\1\20\3\0"+
    "\10\20\1\325\16\20\4\0\1\326\32\0\1\326\22\0"+
    "\1\326\16\0\1\20\3\0\21\20\1\327\5\20\5\0"+
    "\1\330\42\0\1\330\12\0\1\330\15\0\1\20\3\0"+
    "\22\20\1\331\4\20\51\0\1\332\27\0\1\20\3\0"+
    "\10\20\1\333\16\20\4\0\1\334\32\0\1\334\22\0"+
    "\1\334\16\0\1\20\3\0\2\20\1\335\24\20\31\0"+
    "\1\336\47\0\1\20\3\0\16\20\1\337\10\20\45\0"+
    "\1\340\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8326];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\3\11\1\1\3\11"+
    "\12\1\4\11\1\1\1\0\1\11\4\0\12\1\1\0"+
    "\1\1\1\0\1\11\1\0\13\1\1\0\1\1\1\0"+
    "\4\1\1\0\6\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\3\1\1\0\2\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\3\1\1\0\2\1\1\11"+
    "\4\1\1\11\2\1\1\0\2\1\1\0\3\1\2\11"+
    "\1\1\1\11\1\1\1\0\4\1\3\0\3\1\1\0"+
    "\3\1\1\0\1\1\2\0\1\1\1\0\2\1\1\0"+
    "\3\1\1\0\1\1\1\11\1\0\1\1\1\0\2\1"+
    "\1\0\3\1\2\0\1\1\1\0\2\1\1\0\3\1"+
    "\2\0\1\1\1\0\2\1\1\0\2\1\1\11\1\1"+
    "\1\11\1\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\11\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public static LinkedList<ErrorLex> errores = new LinkedList<ErrorLex>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerReporteriaCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("[ERROR] "+yytext());
                                ErrorLex err = new ErrorLex("No es parte del lenguaje actual", yytext(), yyline, yycolumn);
                                errores.add(err);
            }
            // fall through
          case 36: break;
          case 2:
            { /*IGNORE*/
            }
            // fall through
          case 37: break;
          case 3:
            { System.out.println(yytext() + " Token: DOLLAR");
                                return new Symbol(sym.DOLLAR, yycolumn, yyline, yytext());
            }
            // fall through
          case 38: break;
          case 4:
            { System.out.println(yytext() + " Token: PARENTESIS_A");
                                return new Symbol(sym.PARENTESIS_A, yycolumn, yyline, yytext());
            }
            // fall through
          case 39: break;
          case 5:
            { System.out.println(yytext() + " Token: PARENTESIS_C");
                                return new Symbol(sym.PARENTESIS_C, yycolumn, yyline, yytext());
            }
            // fall through
          case 40: break;
          case 6:
            { System.out.println(yytext() + " Token: COMA");
                                return new Symbol(sym.COMA, yycolumn, yyline, yytext());
            }
            // fall through
          case 41: break;
          case 7:
            { System.out.println(yytext() + " Token: NUMERO");
                                return new Symbol(sym.NUMERO, yycolumn, yyline, yytext());
            }
            // fall through
          case 42: break;
          case 8:
            { System.out.println(yytext() + " Token: DOS_PUNTOS");
                                return new Symbol(sym.DOS_PUNTOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 43: break;
          case 9:
            { System.out.println(yytext() + " Token: P_COMA");
                                return new Symbol(sym.P_COMA, yycolumn, yyline, yytext());
            }
            // fall through
          case 44: break;
          case 10:
            { System.out.println(yytext() + " Token: IGUAL");
                                return new Symbol(sym.IGUAL, yycolumn, yyline, yytext());
            }
            // fall through
          case 45: break;
          case 11:
            { System.out.println(yytext() + " Token: IDENTIFICADOR");
                                return new Symbol(sym.IDENTIFICADOR, yycolumn, yyline, yytext());
            }
            // fall through
          case 46: break;
          case 12:
            { System.out.println(yytext() + " Token: CUADRADA_A");
                                return new Symbol(sym.CUADRADA_A, yycolumn, yyline, yytext());
            }
            // fall through
          case 47: break;
          case 13:
            { System.out.println(yytext() + " Token: CUADRADA_C");
                                return new Symbol(sym.CUADRADA_C, yycolumn, yyline, yytext());
            }
            // fall through
          case 48: break;
          case 14:
            { System.out.println(yytext() + " Token: LLAVE_a");
                                return new Symbol(sym.LLAVE_A, yycolumn, yyline, yytext());
            }
            // fall through
          case 49: break;
          case 15:
            { System.out.println(yytext() + " Token: LLAVE_C");
                                return new Symbol(sym.LLAVE_C, yycolumn, yyline, yytext());
            }
            // fall through
          case 50: break;
          case 16:
            { System.out.println(yytext() + " Token: CADENA");
                                return new Symbol(sym.CADENA, yycolumn, yyline, yytext());
            }
            // fall through
          case 51: break;
          case 17:
            { System.out.println("Comentario de una linea: "+yytext());
                                /*return new Symbol(sym.COMENTARIO_LINEAL, yycolumn, yyline, yytext());*/
            }
            // fall through
          case 52: break;
          case 18:
            { System.out.println(yytext() + " Token: DECIMAL");
                                return new Symbol(sym.DECIMAL, yycolumn, yyline, yytext());
            }
            // fall through
          case 53: break;
          case 19:
            { /*return new Symbol(sym.COMENTARIO_MULTI, yycolumn, yyline, yytext());*/
                                System.out.println("Comentario multilinea: "+yytext());
            }
            // fall through
          case 54: break;
          case 20:
            { System.out.println(yytext() + " Token: EJEX");
                                return new Symbol(sym.EJEX, yycolumn, yyline, yytext());
            }
            // fall through
          case 55: break;
          case 21:
            { System.out.println(yytext() + " Token: DOUBLE");
                                return new Symbol(sym.DOUBLE, yycolumn, yyline, yytext());
            }
            // fall through
          case 56: break;
          case 22:
            { System.out.println(yytext() + " Token: STRING");
                                return new Symbol(sym.STRING, yycolumn, yyline, yytext());
            }
            // fall through
          case 57: break;
          case 23:
            { System.out.println(yytext() + " Token: TITULO");
                                return new Symbol(sym.TITULO, yycolumn, yyline, yytext());
            }
            // fall through
          case 58: break;
          case 24:
            { System.out.println(yytext() + " Token: ARCHIVO");
                                return new Symbol(sym.ARCHIVO, yycolumn, yyline, yytext());
            }
            // fall through
          case 59: break;
          case 25:
            { System.out.println(yytext() + " Token: COMPARE");
                                return new Symbol(sym.COMPARE, yycolumn, yyline, yytext());
            }
            // fall through
          case 60: break;
          case 26:
            { System.out.println(yytext() + " Token: TITULOX");
                                return new Symbol(sym.TITULOX, yycolumn, yyline, yytext());
            }
            // fall through
          case 61: break;
          case 27:
            { System.out.println(yytext() + " Token: TITULOY");
                                return new Symbol(sym.TITULOY, yycolumn, yyline, yytext());
            }
            // fall through
          case 62: break;
          case 28:
            { System.out.println(yytext() + " Token: VALORES");
                                return new Symbol(sym.VALORES, yycolumn, yyline, yytext());
            }
            // fall through
          case 63: break;
          case 29:
            { System.out.println(yytext() + " Token: GRAFICA_PIE");
                                return new Symbol(sym.GRAFICA_PIE, yycolumn, yyline, yytext());
            }
            // fall through
          case 64: break;
          case 30:
            { System.out.println(yytext() + " Token: GRAFICA_BARRAS");
                                return new Symbol(sym.GRAFICA_BARRAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 65: break;
          case 31:
            { System.out.println(yytext() + " Token: GRAFICA_LINEAS");
                                return new Symbol(sym.GRAFICA_LINEAS, yycolumn, yyline, yytext());
            }
            // fall through
          case 66: break;
          case 32:
            { System.out.println(yytext() + " Token: PUNTAJE_GENERAL");
                                return new Symbol(sym.PUNTAJE_GENERAL, yycolumn, yyline, yytext());
            }
            // fall through
          case 67: break;
          case 33:
            { System.out.println(yytext() + " Token: DEFINIR_GLOBALSE");
                                return new Symbol(sym.DEFINIR_GLOBALES, yycolumn, yyline, yytext());
            }
            // fall through
          case 68: break;
          case 34:
            { System.out.println(yytext() + " Token: PUNTAJE_ESPECIFICO");
                                return new Symbol(sym.PUNTAJE_ESPECIFICO, yycolumn, yyline, yytext());
            }
            // fall through
          case 69: break;
          case 35:
            { System.out.println(yytext() + " Token: DEFINIR_GLOBALSE");
                                return new Symbol(sym.GENERAR_REPORTE_ESTADISTICO, yycolumn, yyline, yytext());
            }
            // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
