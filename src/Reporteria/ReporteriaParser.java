
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Reporteria;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import models.VariableReporteria;
import models.Grafica;
import models.PuntajeGeneral;
import models.PuntajeEspecifico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ReporteriaParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ReporteriaParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ReporteriaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ReporteriaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\017\006\000\002\017\014\000\002\020\003" +
    "\000\002\020\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\015\003\000\002" +
    "\015\005\000\002\015\002\000\002\016\003\000\002\016" +
    "\005\000\002\016\002\000\002\003\006\000\002\004\010" +
    "\000\002\004\010\000\002\004\010\000\002\004\010\000" +
    "\002\004\002\000\002\005\006\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\002" +
    "\000\002\022\011\000\002\007\006\000\002\010\007\000" +
    "\002\010\011\000\002\010\011\000\002\010\007\000\002" +
    "\010\007\000\002\010\002\000\002\011\006\000\002\012" +
    "\007\000\002\012\011\000\002\012\011\000\002\012\002" +
    "\000\002\013\006\000\002\014\007\000\002\014\007\000" +
    "\002\014\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\006\002\uffff\005\uffff\001\002\000\006\002" +
    "\006\005\005\001\002\000\004\014\010\001\002\000\004" +
    "\002\001\001\002\000\006\002\000\005\000\001\002\000" +
    "\020\003\012\004\uffe2\006\uffe2\007\uffe2\010\uffe2\015\uffe2" +
    "\016\uffe2\001\002\000\016\004\024\006\017\007\020\010" +
    "\025\015\021\016\022\001\002\000\006\015\013\024\014" +
    "\001\002\000\016\004\uffe3\006\uffe3\007\uffe3\010\uffe3\015" +
    "\uffe3\016\uffe3\001\002\000\016\004\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\015\uffe4\016\uffe4\001\002\000\016\004\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\015\uffe8\016\uffe8\001\002\000\016" +
    "\004\uffe9\006\uffe9\007\uffe9\010\uffe9\015\uffe9\016\uffe9\001" +
    "\002\000\004\014\145\001\002\000\004\014\110\001\002" +
    "\000\006\002\uffea\005\uffea\001\002\000\004\017\102\001" +
    "\002\000\016\004\uffe6\006\uffe6\007\uffe6\010\uffe6\015\uffe6" +
    "\016\uffe6\001\002\000\004\014\045\001\002\000\004\014" +
    "\030\001\002\000\016\004\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\015\uffe5\016\uffe5\001\002\000\016\004\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\015\uffe7\016\uffe7\001\002\000\010\015\uffd1" +
    "\031\uffd1\036\uffd1\001\002\000\010\015\034\031\033\036" +
    "\032\001\002\000\004\025\042\001\002\000\004\025\035" +
    "\001\002\000\016\004\uffd4\006\uffd4\007\uffd4\010\uffd4\015" +
    "\uffd4\016\uffd4\001\002\000\006\041\037\042\040\001\002" +
    "\000\004\024\041\001\002\000\012\020\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\001\002\000\012\020\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\001\002\000\010\015\uffd3\031\uffd3\036\uffd3\001" +
    "\002\000\006\041\037\042\040\001\002\000\004\024\044" +
    "\001\002\000\010\015\uffd2\031\uffd2\036\uffd2\001\002\000" +
    "\010\015\uffeb\027\uffeb\030\uffeb\001\002\000\010\015\051" +
    "\027\047\030\050\001\002\000\004\041\076\001\002\000" +
    "\004\041\052\001\002\000\016\004\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\015\ufff0\016\ufff0\001\002\000\004\026\053\001" +
    "\002\000\010\013\056\037\057\040\054\001\002\000\004" +
    "\024\075\001\002\000\004\024\074\001\002\000\004\014" +
    "\061\001\002\000\004\024\060\001\002\000\010\015\uffed" +
    "\027\uffed\030\uffed\001\002\000\006\011\063\012\062\001" +
    "\002\000\004\023\065\001\002\000\004\015\064\001\002" +
    "\000\010\022\ufffe\023\ufffe\024\ufffe\001\002\000\004\042" +
    "\066\001\002\000\004\023\067\001\002\000\004\042\070" +
    "\001\002\000\004\023\071\001\002\000\004\042\072\001" +
    "\002\000\004\015\073\001\002\000\010\022\ufffd\023\ufffd" +
    "\024\ufffd\001\002\000\010\015\uffec\027\uffec\030\uffec\001" +
    "\002\000\010\015\uffee\027\uffee\030\uffee\001\002\000\004" +
    "\026\077\001\002\000\004\042\100\001\002\000\004\024" +
    "\101\001\002\000\010\015\uffef\027\uffef\030\uffef\001\002" +
    "\000\006\041\037\042\040\001\002\000\004\023\104\001" +
    "\002\000\006\041\037\042\040\001\002\000\004\020\106" +
    "\001\002\000\004\024\107\001\002\000\016\004\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\015\uffe1\016\uffe1\001\002\000\012" +
    "\015\uffd5\031\uffd5\032\uffd5\033\uffd5\001\002\000\012\015" +
    "\115\031\112\032\114\033\113\001\002\000\004\025\142" +
    "\001\002\000\004\025\126\001\002\000\004\025\116\001" +
    "\002\000\016\004\uffd9\006\uffd9\007\uffd9\010\uffd9\015\uffd9" +
    "\016\uffd9\001\002\000\004\021\117\001\002\000\012\022" +
    "\ufff4\023\ufff4\041\037\042\040\001\002\000\006\022\ufff6" +
    "\023\ufff6\001\002\000\006\022\123\023\122\001\002\000" +
    "\006\041\037\042\040\001\002\000\004\024\124\001\002" +
    "\000\012\015\uffd7\031\uffd7\032\uffd7\033\uffd7\001\002\000" +
    "\006\022\ufff5\023\ufff5\001\002\000\004\021\127\001\002" +
    "\000\016\013\056\022\ufff1\023\ufff1\037\135\040\130\041" +
    "\131\001\002\000\006\022\ufffa\023\ufffa\001\002\000\006" +
    "\022\ufff8\023\ufff8\001\002\000\006\022\ufff7\023\ufff7\001" +
    "\002\000\006\022\136\023\137\001\002\000\006\022\ufff3" +
    "\023\ufff3\001\002\000\006\022\ufff9\023\ufff9\001\002\000" +
    "\004\024\141\001\002\000\012\013\056\037\135\040\130" +
    "\041\131\001\002\000\006\022\ufff2\023\ufff2\001\002\000" +
    "\012\015\uffd6\031\uffd6\032\uffd6\033\uffd6\001\002\000\006" +
    "\041\037\042\040\001\002\000\004\024\144\001\002\000" +
    "\012\015\uffd8\031\uffd8\032\uffd8\033\uffd8\001\002\000\016" +
    "\015\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\001" +
    "\002\000\016\015\153\031\147\032\154\033\151\034\152" +
    "\035\150\001\002\000\004\025\175\001\002\000\004\025" +
    "\172\001\002\000\004\025\165\001\002\000\004\025\162" +
    "\001\002\000\016\004\uffe0\006\uffe0\007\uffe0\010\uffe0\015" +
    "\uffe0\016\uffe0\001\002\000\004\025\155\001\002\000\004" +
    "\021\156\001\002\000\012\022\ufff4\023\ufff4\041\037\042" +
    "\040\001\002\000\006\022\160\023\122\001\002\000\004" +
    "\024\161\001\002\000\016\015\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\001\002\000\006\041\037\042\040" +
    "\001\002\000\004\024\164\001\002\000\016\015\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\001\002\000\004" +
    "\021\166\001\002\000\016\013\056\022\ufff1\023\ufff1\037" +
    "\135\040\130\041\131\001\002\000\006\022\170\023\137" +
    "\001\002\000\004\024\171\001\002\000\016\015\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\001\002\000\006" +
    "\041\037\042\040\001\002\000\004\024\174\001\002\000" +
    "\016\015\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\001\002\000\006\041\037\042\040\001\002\000\004\024" +
    "\177\001\002\000\016\015\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\002\003\001\001\000\004\005\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\010\001\001\000\014\003\015\007\014\011" +
    "\026\013\022\022\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\102\001\001" +
    "\000\002\001\001\000\004\020\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\120\020\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\132\017\131\021\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\131\021\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\156\020\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\166\017\131\021\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\175\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ReporteriaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ReporteriaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ReporteriaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol sim){
        System.out.println("Error recuperable: " + sim.value + "| Linea: " + (sim.right + 1) + "| Columna: " + (sim.left + 1));
    }
    public void unrecovered_syntax_error(Symbol sim){
        System.out.println("Error NO recuperable: " + sim.value + "| Linea: " + (sim.right + 1) + "| Columna: " + (sim.left + 1));
    }
    public LinkedList<Grafica> graficas = new LinkedList<Grafica>();
    public Grafica graf = new Grafica();
    public LinkedList<VariableReporteria> variables = new LinkedList<VariableReporteria>();
    public String[] rutas = new String[2];



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ReporteriaParser$actions {




  private final ReporteriaParser parser;

  /** Constructor */
  CUP$ReporteriaParser$actions(ReporteriaParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ReporteriaParser$do_action_part00000000(
    int                        CUP$ReporteriaParser$act_num,
    java_cup.runtime.lr_parser CUP$ReporteriaParser$parser,
    java.util.Stack            CUP$ReporteriaParser$stack,
    int                        CUP$ReporteriaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ReporteriaParser$result;

      /* select the action based on the action number */
      switch (CUP$ReporteriaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= libre EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).value;
		RESULT = start_val;
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ReporteriaParser$parser.done_parsing();
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // libre ::= libre generar_reporte 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("libre",0, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // libre ::= 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("libre",0, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // puntaje ::= DOLLAR LLAVE_A PUNTAJE_GENERAL LLAVE_C 
            {
              Object RESULT =null;
		
            RESULT = new PuntajeGeneral();
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("puntaje",13, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // puntaje ::= DOLLAR LLAVE_A PUNTAJE_ESPECIFICO COMA CADENA COMA CADENA COMA CADENA LLAVE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).value;
		
            RESULT = new PuntajeEspecifico(a.toString(), b.toString(), c.toString());
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("puntaje",13, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-9)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // valorstring ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.peek()).value;
		
            RESULT=a;
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("valorstring",14, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // valorstring ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.peek()).value;
		
            RESULT=a;
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("valorstring",14, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // valornumerico ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.peek()).value;
		
            RESULT=a;
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("valornumerico",15, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // valornumerico ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.peek()).value;
		
            RESULT=a;
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("valornumerico",15, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valornumerico ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.peek()).value;
		
            RESULT=a;
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("valornumerico",15, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // valornumerico ::= puntaje 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.peek()).value;
		
            RESULT = a;
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("valornumerico",15, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // arreglostring ::= valorstring 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.peek()).value;
		
            graf.ejex.add(a.toString());
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("arreglostring",11, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arreglostring ::= arreglostring COMA valorstring 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.peek()).value;
		
            graf.ejex.add(a.toString());
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("arreglostring",11, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arreglostring ::= 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("arreglostring",11, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arreglonumerico ::= valornumerico 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.peek()).value;
		
            graf.valores.add(a);
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("arreglonumerico",12, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arreglonumerico ::= arreglonumerico COMA valornumerico 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.peek()).value;
		
            graf.valores.add(a);
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("arreglonumerico",12, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arreglonumerico ::= 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("arreglonumerico",12, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // definir_glob ::= DEFINIR_GLOBALES LLAVE_A definiciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("definir_glob",1, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // definiciones ::= definiciones STRING IDENTIFICADOR IGUAL CADENA P_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).value;
		
                        VariableReporteria newVar = new VariableReporteria("STRING", a, b, -1, -1, null, null);
                        variables.add(newVar);
                    
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("definiciones",2, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-5)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // definiciones ::= definiciones DOUBLE IDENTIFICADOR IGUAL NUMERO P_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).value;
		
            VariableReporteria newVar = new VariableReporteria("INT", a, null, Integer.parseInt(b), -1, null, null);
            variables.add(newVar);
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("definiciones",2, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-5)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // definiciones ::= definiciones DOUBLE IDENTIFICADOR IGUAL DECIMAL P_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).value;
		
            VariableReporteria newVar = new VariableReporteria("DOUBLE", a, null, -1, Double.parseDouble(b), null, null);
            variables.add(newVar);
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("definiciones",2, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-5)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // definiciones ::= definiciones DOUBLE IDENTIFICADOR IGUAL puntaje P_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).value;
		
            if (b instanceof PuntajeGeneral){
                VariableReporteria newVar = new VariableReporteria("PUNTAJE GENERAL", a, null, -1, -1, new PuntajeGeneral(), null);
                variables.add(newVar);
            }else {
                PuntajeEspecifico pe = new PuntajeEspecifico(((PuntajeEspecifico)b).archivo, ((PuntajeEspecifico)b).campo1, ((PuntajeEspecifico)b).campo2);
                VariableReporteria newVar = new VariableReporteria("PUNTAJE ESPECIFICO", a, null, -1, -1, null, pe);
                variables.add(newVar);
            }
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("definiciones",2, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-5)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // definiciones ::= 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("definiciones",2, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // generar_reporte ::= GENERAR_REPORTE_ESTADISTICO LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("generar_reporte",3, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instrucciones ::= instrucciones definir_glob 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instrucciones ::= instrucciones graf_barras 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instrucciones ::= instrucciones graf_pie 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instrucciones ::= instrucciones graf_lineas 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instrucciones ::= instrucciones compar 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instrucciones ::= error P_COMA 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instrucciones ::= error LLAVE_C 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instrucciones ::= 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // compar ::= COMPARE PARENTESIS_A valorstring COMA valorstring PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-2)).value;
		
            rutas[0] = a.toString();
            rutas[1] = b.toString();
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("compar",16, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-6)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // graf_barras ::= GRAFICA_BARRAS LLAVE_A instrucciones_barras LLAVE_C 
            {
              Object RESULT =null;
		
        graf.tipo = "BARRAS";
        graficas.add(graf);
        graf = new Grafica();
    
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("graf_barras",5, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instrucciones_barras ::= instrucciones_barras TITULO DOS_PUNTOS valorstring P_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).value;
		
            graf.titulo = a.toString();
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones_barras",6, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instrucciones_barras ::= instrucciones_barras EJEX DOS_PUNTOS CUADRADA_A arreglostring CUADRADA_C P_COMA 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones_barras",6, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-6)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instrucciones_barras ::= instrucciones_barras VALORES DOS_PUNTOS CUADRADA_A arreglonumerico CUADRADA_C P_COMA 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones_barras",6, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-6)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instrucciones_barras ::= instrucciones_barras TITULOX DOS_PUNTOS valorstring P_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).value;
		
            graf.titulox = a.toString();
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones_barras",6, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instrucciones_barras ::= instrucciones_barras TITULOY DOS_PUNTOS valorstring P_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).value;
		
            graf.tituloy = a.toString();
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones_barras",6, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instrucciones_barras ::= 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones_barras",6, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // graf_pie ::= GRAFICA_PIE LLAVE_A instrucciones_pie LLAVE_C 
            {
              Object RESULT =null;
		
        graf.tipo = "PIE";
        graficas.add(graf);
        graf = new Grafica();
    
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("graf_pie",7, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instrucciones_pie ::= instrucciones_pie TITULO DOS_PUNTOS valorstring P_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).value;
		
            graf.titulo = a.toString();
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones_pie",8, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instrucciones_pie ::= instrucciones_pie EJEX DOS_PUNTOS CUADRADA_A arreglostring CUADRADA_C P_COMA 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones_pie",8, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-6)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instrucciones_pie ::= instrucciones_pie VALORES DOS_PUNTOS CUADRADA_A arreglonumerico CUADRADA_C P_COMA 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones_pie",8, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-6)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instrucciones_pie ::= 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones_pie",8, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // graf_lineas ::= GRAFICA_LINEAS LLAVE_A instrucciones_lineas LLAVE_C 
            {
              Object RESULT =null;
		
        graf.tipo = "LINEAS";
        graficas.add(graf);
        graf = new Grafica();
    
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("graf_lineas",9, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instrucciones_lineas ::= instrucciones_lineas TITULO DOS_PUNTOS valorstring P_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).value;
		
            graf.titulo = a.toString();
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones_lineas",10, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instrucciones_lineas ::= instrucciones_lineas ARCHIVO DOS_PUNTOS valorstring P_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-1)).value;
		
            graf.archivo = a.toString();
        
              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones_lineas",10, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.elementAt(CUP$ReporteriaParser$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instrucciones_lineas ::= 
            {
              Object RESULT =null;

              CUP$ReporteriaParser$result = parser.getSymbolFactory().newSymbol("instrucciones_lineas",10, ((java_cup.runtime.Symbol)CUP$ReporteriaParser$stack.peek()), RESULT);
            }
          return CUP$ReporteriaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ReporteriaParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ReporteriaParser$do_action(
    int                        CUP$ReporteriaParser$act_num,
    java_cup.runtime.lr_parser CUP$ReporteriaParser$parser,
    java.util.Stack            CUP$ReporteriaParser$stack,
    int                        CUP$ReporteriaParser$top)
    throws java.lang.Exception
    {
              return CUP$ReporteriaParser$do_action_part00000000(
                               CUP$ReporteriaParser$act_num,
                               CUP$ReporteriaParser$parser,
                               CUP$ReporteriaParser$stack,
                               CUP$ReporteriaParser$top);
    }
}

}
